"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[135],{7135:function(e,t,n){n.r(t);t.default='<?xml version="1.0" encoding="utf-8"?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/> <meta name="viewport" content="width=device-width,initial-scale=1"/> <title>Emacs configuration</title> <meta name="author" content="Giovani Pedroso"/> <meta name="generator" content="Org Mode"/> <style>#content{max-width:60em;margin:auto}.title{text-align:center;margin-bottom:.2em}.subtitle{text-align:center;font-size:medium;font-weight:700;margin-top:0}.todo{font-family:monospace;color:red}.done{font-family:monospace;color:green}.priority{font-family:monospace;color:orange}.tag{background-color:#eee;font-family:monospace;padding:2px;font-size:80%;font-weight:400}.timestamp{color:#bebebe}.timestamp-kwd{color:#5f9ea0}.org-right{margin-left:auto;margin-right:0;text-align:right}.org-left{margin-left:0;margin-right:auto;text-align:left}.org-center{margin-left:auto;margin-right:auto;text-align:center}.underline{text-decoration:underline}#postamble p,#preamble p{font-size:90%;margin:.2em}p.verse{margin-left:3%}pre{border:1px solid #e6e6e6;border-radius:3px;background-color:#f2f2f2;padding:8pt;font-family:monospace;overflow:auto;margin:1.2em}pre.src{position:relative;overflow:auto}pre.src:before{display:none;position:absolute;top:-8px;right:12px;padding:3px;color:#555;background-color:#f2f2f299}pre.src:hover:before{display:inline;margin-top:14px}pre.src-asymptote:before{content:"Asymptote"}pre.src-awk:before{content:"Awk"}pre.src-authinfo::before{content:"Authinfo"}pre.src-C:before{content:"C"}pre.src-clojure:before{content:"Clojure"}pre.src-css:before{content:"CSS"}pre.src-D:before{content:"D"}pre.src-ditaa:before{content:"ditaa"}pre.src-dot:before{content:"Graphviz"}pre.src-calc:before{content:"Emacs Calc"}pre.src-emacs-lisp:before{content:"Emacs Lisp"}pre.src-fortran:before{content:"Fortran"}pre.src-gnuplot:before{content:"gnuplot"}pre.src-haskell:before{content:"Haskell"}pre.src-hledger:before{content:"hledger"}pre.src-java:before{content:"Java"}pre.src-js:before{content:"Javascript"}pre.src-latex:before{content:"LaTeX"}pre.src-ledger:before{content:"Ledger"}pre.src-lisp:before{content:"Lisp"}pre.src-lilypond:before{content:"Lilypond"}pre.src-lua:before{content:"Lua"}pre.src-matlab:before{content:"MATLAB"}pre.src-mscgen:before{content:"Mscgen"}pre.src-ocaml:before{content:"Objective Caml"}pre.src-octave:before{content:"Octave"}pre.src-org:before{content:"Org mode"}pre.src-oz:before{content:"OZ"}pre.src-plantuml:before{content:"Plantuml"}pre.src-processing:before{content:"Processing.js"}pre.src-python:before{content:"Python"}pre.src-R:before{content:"R"}pre.src-ruby:before{content:"Ruby"}pre.src-sass:before{content:"Sass"}pre.src-scheme:before{content:"Scheme"}pre.src-screen:before{content:"Gnu Screen"}pre.src-sed:before{content:"Sed"}pre.src-sh:before{content:"shell"}pre.src-sql:before{content:"SQL"}pre.src-sqlite:before{content:"SQLite"}pre.src-forth:before{content:"Forth"}pre.src-io:before{content:"IO"}pre.src-J:before{content:"J"}pre.src-makefile:before{content:"Makefile"}pre.src-maxima:before{content:"Maxima"}pre.src-perl:before{content:"Perl"}pre.src-picolisp:before{content:"Pico Lisp"}pre.src-scala:before{content:"Scala"}pre.src-shell:before{content:"Shell Script"}pre.src-ebnf2ps:before{content:"ebfn2ps"}pre.src-cpp:before{content:"C++"}pre.src-abc:before{content:"ABC"}pre.src-coq:before{content:"Coq"}pre.src-groovy:before{content:"Groovy"}pre.src-bash:before{content:"bash"}pre.src-csh:before{content:"csh"}pre.src-ash:before{content:"ash"}pre.src-dash:before{content:"dash"}pre.src-ksh:before{content:"ksh"}pre.src-mksh:before{content:"mksh"}pre.src-posh:before{content:"posh"}pre.src-ada:before{content:"Ada"}pre.src-asm:before{content:"Assembler"}pre.src-caml:before{content:"Caml"}pre.src-delphi:before{content:"Delphi"}pre.src-html:before{content:"HTML"}pre.src-idl:before{content:"IDL"}pre.src-mercury:before{content:"Mercury"}pre.src-metapost:before{content:"MetaPost"}pre.src-modula-2:before{content:"Modula-2"}pre.src-pascal:before{content:"Pascal"}pre.src-ps:before{content:"PostScript"}pre.src-prolog:before{content:"Prolog"}pre.src-simula:before{content:"Simula"}pre.src-tcl:before{content:"tcl"}pre.src-tex:before{content:"TeX"}pre.src-plain-tex:before{content:"Plain TeX"}pre.src-verilog:before{content:"Verilog"}pre.src-vhdl:before{content:"VHDL"}pre.src-xml:before{content:"XML"}pre.src-nxml:before{content:"XML"}pre.src-conf:before{content:"Configuration File"}table{border-collapse:collapse}caption.t-above{caption-side:top}caption.t-bottom{caption-side:bottom}td,th{vertical-align:top}th.org-right{text-align:center}th.org-left{text-align:center}th.org-center{text-align:center}td.org-right{text-align:right}td.org-left{text-align:left}td.org-center{text-align:center}dt{font-weight:700}.footpara{display:inline}.footdef{margin-bottom:1em}.figure{padding:1em}.figure p{text-align:center}.equation-container{display:table;text-align:center;width:100%}.equation{vertical-align:middle}.equation-label{display:table-cell;text-align:right;vertical-align:middle}.inlinetask{padding:10px;border:2px solid gray;margin:10px;background:#ffc}#org-div-home-and-up{text-align:right;font-size:70%;white-space:nowrap}textarea{overflow-x:auto}.linenr{font-size:smaller}.code-highlighted{background-color:#ff0}.org-info-js_info-navigation{border-style:none}#org-info-js_console-label{font-size:10px;font-weight:700;white-space:nowrap}.org-info-js_search-highlight{background-color:#ff0;color:#000;font-weight:700}.org-svg{width:90%}</style> </head> <body> <div id="content" class="content"> <h1 class="title">Emacs configuration</h1> <div id="table-of-contents" role="doc-toc"> <h2>Table of Contents</h2> <div id="text-table-of-contents" role="doc-toc"> <ul> <li> <a href="#orgb68c5f2">1. Basic</a> <ul> <li> <a href="#orgef15b8d">1.1. Basic configurations for functionality</a> </li> <li><a href="#orgbe0118f">1.2. Packages config</a></li> <li><a href="#org9ebe71f">1.3. Custom variables</a></li> </ul> </li> <li> <a href="#org92f95b7">2. Functional</a> <ul> <li><a href="#org56ab7a0">2.1. Evil</a></li> <li><a href="#org9df9fbc">2.2. evil-nerd-commenter</a></li> <li><a href="#org291f8cb">2.3. undo-fo and undo tree</a></li> <li><a href="#org1db1312">2.4. Rainbow mode</a></li> <li><a href="#orga1ed8c3">2.5. Which key</a></li> <li><a href="#org6753c58">2.6. Auto-complete</a></li> <li><a href="#org1a1076e">2.7. NeoTree</a></li> <li><a href="#org8900b33">2.8. Dash Board</a></li> <li><a href="#org59a6a2a">2.9. Centaur tabs - OFF</a></li> <li><a href="#org018a315">2.10. Flycheck syntax checker</a></li> <li><a href="#orge0ffb36">2.11. Helm - OFF</a></li> <li> <a href="#org69fa4a9">2.12. Ivy - OFF</a> <ul> <li><a href="#org17b04af">2.12.1. Ivy-rich - OFF</a></li> </ul> </li> <li><a href="#orgd9f714e">2.13. Vertigo</a></li> <li><a href="#org0a961d3">2.14. Marginalia</a></li> <li><a href="#org9733347">2.15. Rainbow delimiter</a></li> <li> <a href="#orgee60ab0">2.16. Projectile</a> <ul> <li><a href="#org251ee2e">2.16.1. Counsel</a></li> </ul> </li> <li><a href="#org7f0f20c">2.17. Magit</a></li> <li><a href="#orge3196a3">2.18. Helpful</a></li> </ul> </li> <li> <a href="#orgf8b2899">3. Appearance</a> <ul> <li><a href="#org521844a">3.1. All the icons</a></li> <li><a href="#org35525c0">3.2. Doom Themes</a></li> <li><a href="#org23e0166">3.3. Doom modeline</a></li> <li><a href="#orge27214d">3.4. Page Breaking</a></li> </ul> </li> <li> <a href="#org0fb5f42">4. Programming</a> <ul> <li> <a href="#orgc9b02c6">4.1. lsp-mode</a> <ul> <li><a href="#orgf7f86cf">4.1.1. lsp-ui</a></li> <li><a href="#org401762c">4.1.2. lsp-treeemacs</a></li> </ul> </li> <li> <a href="#orgc2d1f1c">4.2. dap-mode ( Debug Adapter Protocol)</a> </li> <li><a href="#org3ce1ef6">4.3. Company-mode</a></li> <li> <a href="#org6f4e76c">4.4. Elisp</a> <ul> <li><a href="#org99aaedd">4.4.1. ParaEdit</a></li> </ul> </li> <li> <a href="#org78d78b4">4.5. Org</a> <ul> <li><a href="#org525799f">4.5.1. Basic Config</a></li> <li> <a href="#org5fad39c">4.5.2. Centraliza o texto org mode</a> </li> <li> <a href="#orgd0bc157">4.5.3. Add templets for the extencions .el, .py &#x2026;</a> </li> <li><a href="#org4ff76a8">4.5.4. Babel to load</a></li> <li><a href="#org3fb5958">4.5.5. Tangle automatic</a></li> <li><a href="#orgf7f56ff">4.5.6. Org Agenda</a></li> <li><a href="#org9ba2d52">4.5.7. Customization</a></li> <li><a href="#org5215a97">4.5.8. Org Roam</a></li> <li> <a href="#orgf3eefd8">4.5.9. Change the sizes of the headers</a> </li> </ul> </li> <li> <a href="#org99a6056">4.6. Python</a> <ul> <li><a href="#orgdf2ab89">4.6.1. Python mode</a></li> </ul> </li> <li> <a href="#org43142c2">4.7. JS- Not useful since I have the web mode</a> <ul> <li><a href="#orgb15f49a">4.7.1. RJSX</a></li> <li><a href="#orge29a051">4.7.2. Tide</a></li> </ul> </li> <li><a href="#org682a367">4.8. Typescript</a></li> <li> <a href="#org9a95f03">4.9. web-mode</a> <ul> <li><a href="#org6b06c92">4.9.1. Prettier</a></li> </ul> </li> <li><a href="#org4ab8944">4.10. CSS/SCSS-mode</a></li> <li><a href="#org54a6bca">4.11. JSON-mode</a></li> <li><a href="#org0fb8813">4.12. yalm-mode</a></li> <li><a href="#org56c1838">4.13. Dockerfile-mode</a></li> <li><a href="#orgc5d2099">4.14. format-all</a></li> </ul> </li> <li><a href="#orgf271042">5. Update packages</a></li> <li> <a href="#orgfd96e5f">6. Key Binds</a> <ul> <li><a href="#org6214504">6.1. org-babel-tange</a></li> <li> <a href="#org7fc3bfd">6.2. flyspell, ispell</a> <ul> <li> <a href="#orgaba6adc">6.2.1. flyspelll-prog-mode key binding</a> </li> <li> <a href="#orgf6912b3">6.2.2. flyspell-key-mode binding</a> </li> <li> <a href="#org9458f5c">6.2.3. Ispell comments and strings key binding</a> </li> <li><a href="#org00bcaca">6.2.4. Ispell key binding</a></li> </ul> </li> </ul> </li> <li><a href="#org7b5d067">7. Test area</a></li> </ul> </div> </div> <p> My main goal of this configuration is to turn the emacs into a IDE for working with React, nodeJs and embedded system like stm32 and esp-idf. I made this configuration using the tutorials of the channel <a href="https://www.youtube.com/c/SystemCrafters">SystemCrafters</a> </p> <div id="outline-container-orgb68c5f2" class="outline-2"> <h2 id="orgb68c5f2"><span class="section-number-2">1.</span> Basic</h2> <div class="outline-text-2" id="text-1"> <p> These settings do not need any package installed, they just change basic behaviour of emacs </p> </div> <div id="outline-container-orgef15b8d" class="outline-3"> <h3 id="orgef15b8d"> <span class="section-number-3">1.1.</span> Basic configurations for functionality </h3> <div class="outline-text-3" id="text-1-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;;remove o initial buffer\n(setq inhibit-tar.up-message t)\n\n;;Hide the tool bar\n(tool-bar-mode   -1)\n\n;;Hide the menu bar\n(menu-bar-mode   -1)                 \n\n;;Oculta dicase\n(tooltip-mode    -1)                 \n\n;;Disable the scroll bar\n(scroll-bar-mode -1)                \n\n;;Show the column number in the modeline\n(column-number-mode t)              \n\n;;Enable the highlight line\n(global-hl-line-mode t)\n\n(kill-buffer)                            \n\n;;Set the lines on in the relative mode\n(setq display-line-numbers-type \'relative) \n(global-display-line-numbers-mode)\n\n;;Disable the suspend frame\n(global-unset-key (kbd "C-z"))\n\n\n(delete-selection-mode t) \n\n;;disable num lines for the modes:\n(dolist (mode \'(org-mode-hook\n\t\t\t\t\t\t\t\tvterm-mode-hook\n\t\t\t\t\t\t\t\tterm-mode-hook\n\t\t\t\t\t\t\t\tshell-mode-hook\n\t\t\t\t\t\t\t\ttreemacs-mode-hook\n\t\t\t\t\t\t\t\teshell-mode-hook))\n\t(add-hook mode (lambda () (display-line-numbers-mode 0))))\n\n;;Smoth scroll\n(setq mouse-wheel-scroll-amount \'(8 ((shift) . 1)) \n\t\t\tmouse-wheel-progressive-speed nil            \n\t\t\tmouse-wheel-follow-mouse \'t                  \n\t\t\tscroll-step 1)                               \n\n;;Broke line\n(global-visual-line-mode t)\n\n;;Space in the boards\n(set-fringe-mode 0)\n\n;;Cursor type\n(setq-default cursor-type \'box)\n\n(setq backup-directory-alist `(("." . "~/.saves")))\n</pre> </div> </div> </div> <div id="outline-container-orgbe0118f" class="outline-3"> <h3 id="orgbe0118f"> <span class="section-number-3">1.2.</span> Packages config </h3> <div class="outline-text-3" id="text-1-2"> <p> Configure the origins on the packages and installs the use-package, this package is a better way to install package that the vanilla emacs package manager </p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;;Verify and initialize the package.el\n(require \'package)\n;;Define the repos\n(setq package-archives \'(("melpa" . "https://melpa.org/packages/")\n\t\t\t\t\t\t\t\t\t\t\t\t ("org"   . "https://orgmode.org/elpa/")\n\t\t\t\t\t\t\t\t\t\t\t\t ("elpa"  . "https://elpa.gnu.org/packages/")))\n\n;;Init the package system\n(package-initialize)\n(unless package-archive-contents\n\t(package-refresh-contents))\n\n;;Installs the use-package\n(unless (package-installed-p \'use-package)\n\t(package-install \'use-package))\n\n(require \'use-package)\n(setq use-package-always-ensure t)\n</pre> </div> </div> </div> <div id="outline-container-org9ebe71f" class="outline-3"> <h3 id="org9ebe71f"> <span class="section-number-3">1.3.</span> Custom variables </h3> <div class="outline-text-3" id="text-1-3"> <p>I just copy and paste this part</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(custom-set-variables\n ;; custom-set-variables was added by Custom.\n ;; If you edit it by hand, you could mess it up, so be careful.\n ;; Your init file should contain only one such instance.\n ;; If there is more than one, they won\'t work right.\n \'(custom-safe-themes\n\t \'("1d5e33500bc9548f800f9e248b57d1b2a9ecde79cb40c0b1398dec51ee820daf" "8d7b028e7b7843ae00498f68fad28f3c6258eda0650fe7e17bfb017d51d0e2a2" "a82ab9f1308b4e10684815b08c9cac6b07d5ccb12491f44a942d845b406b0296" "266ecb1511fa3513ed7992e6cd461756a895dcc5fef2d378f165fed1c894a78c" "76ed126dd3c3b653601ec8447f28d8e71a59be07d010cd96c55794c3008df4d7" "d47f868fd34613bd1fc11721fe055f26fd163426a299d45ce69bef1f109e1e71" "7a7b1d475b42c1a0b61f3b1d1225dd249ffa1abb1b7f726aec59ac7ca3bf4dae" "835868dcd17131ba8b9619d14c67c127aa18b90a82438c8613586331129dda63" default))\n \'(package-selected-packages\n\t \'(visual-fill-column org-bullets counsel-projectile forge ivy-rich which-key rainbow-delimiters ivy ivyy flycheck helm undo-fu undo-tree evil centaur-tabs dashboard doom-themes doom-modeline all-the-icons neotree auto-complete auto-package-update use-package))\n \'(warning-suppress-log-types \'((comp) (comp) (comp)))\n \'(warning-suppress-types \'((comp) (comp))))\n</pre> </div> </div> </div> </div> <div id="outline-container-org92f95b7" class="outline-2"> <h2 id="org92f95b7"> <span class="section-number-2">2.</span> Functional </h2> <div class="outline-text-2" id="text-2"> <p> Here is the installation and configuration of packages (code created by community) that give the emacs more functionality </p> </div> <div id="outline-container-org56ab7a0" class="outline-3"> <h3 id="org56ab7a0"> <span class="section-number-3">2.1.</span> Evil </h3> <div class="outline-text-3" id="text-2-1"> <p>Vim emulator for emacs</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package evil\n\t:ensure t\n\t:config\n\t(evil-mode)\n\t(evil-set-undo-system \'undo-redo)) \n</pre> </div> </div> </div> <div id="outline-container-org9df9fbc" class="outline-3"> <h3 id="org9df9fbc"> <span class="section-number-3">2.2.</span> evil-nerd-commenter </h3> <div class="outline-text-3" id="text-2-2"> <p>Allow to comment or uncomment lines using a simple keybind</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package evil-nerd-commenter)\n(global-set-key (kbd "C-c \\\\") \'evilnc-comment-or-uncomment-lines)\n</pre> </div> </div> </div> <div id="outline-container-org291f8cb" class="outline-3"> <h3 id="org291f8cb"> <span class="section-number-3">2.3.</span> undo-fo and undo tree </h3> <div class="outline-text-3" id="text-2-3"> <p>Give Undo functions to evil</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package undo-fu)\n(use-package undo-tree\n\t:config\n\t(undo-tree-mode))\n\n;;Create a \n(global-set-key (kbd "C-c z") (undo-tree-redo))\n</pre> </div> </div> </div> <div id="outline-container-org1db1312" class="outline-3"> <h3 id="org1db1312"> <span class="section-number-3">2.4.</span> Rainbow mode </h3> <div class="outline-text-3" id="text-2-4"> <p> This package add the functionality to see colors in the buffer #0000ff </p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package rainbow-mode\n\t:ensure t\n\t:config\n\t(rainbow-mode)\n\t)\n</pre> </div> </div> </div> <div id="outline-container-orga1ed8c3" class="outline-3"> <h3 id="orga1ed8c3"> <span class="section-number-3">2.5.</span> Which key </h3> <div class="outline-text-3" id="text-2-5"> <p>autocomplete for the shortcut keys</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package which-key\n\t:defer 0\n\t:diminish which-key-mode\n\t:config\n\t(which-key-mode)\n\t(setq which-key-idle-delay 1))\n</pre> </div> </div> </div> <div id="outline-container-org6753c58" class="outline-3"> <h3 id="org6753c58"> <span class="section-number-3">2.6.</span> Auto-complete </h3> <div class="outline-text-3" id="text-2-6"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package auto-complete\n\t:ensure t\n\t:init\n\t(progn\n\t\t(ac-config-default)\n\t\t(global-auto-complete-mode t)))\n</pre> </div> </div> </div> <div id="outline-container-org1a1076e" class="outline-3"> <h3 id="org1a1076e"> <span class="section-number-3">2.7.</span> NeoTree </h3> <div class="outline-text-3" id="text-2-7"> <p>Open a "file explorer" C-\\</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package neotree\n\t:ensure t\n\t:config\n\t(progn\n\t\t(setq neo-theme (if (display-graphic-p) \'icons \'arrow)))\n\t:bind (("C-\\\\" . \'neotree-toggle)))\n</pre> </div> </div> </div> <div id="outline-container-org8900b33" class="outline-3"> <h3 id="org8900b33"> <span class="section-number-3">2.8.</span> Dash Board </h3> <div class="outline-text-3" id="text-2-8"> <p> Change the initial buffer of emacs for a dashboard that shows the folders that you bookmark, the recent files, etc&#x2026; </p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;;Get the a random image to show on the dashboard\n(defun get-random-image()\n\t;;Set the  directory of the images\n\t(setq-local directory-images "~/Imagens/Emacs-dash-board/to-show/")\n\t;;Put in a list all images in the directory\n\t(setq-local images (directory-files directory-images nil ".png"))\n\n\t;;Join the folder\'s path with the image path\n\t;;and return the full path\n\t(concat directory-images\n\t\t\t\t\t;;get a random image\n\t\t\t\t\t(nth (- (random (length images)) 1) images)\n\t\t\t\t\t))\n\n(use-package dashboard\n\t:ensure t\n\t:init\n\t(progn;;This execult commands in the initialization process\n\t\t(setq dashboard-banner-logo-title "Better that vim")\n\t\t(setq dashboard-set-init-info nil)\n\t\t(setq dashboard-startup-banner (get-random-image))\n\t\t(setq dashboard-set-heading-icons t)\n\n\t\t;; Content is not centered by default. To center, set\n\t\t;;This variable to t\n\t\t;;(setq dashboard-center-content t)\n\t\t(setq dashboard-set-file-icons t)\n\t\t;;(setq dashboard-footer-messages \'("Better than VSCoiso"))\n\t\t(setq dashboard-items \'(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t;;(agenda . 4)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t;;(recents  . 6)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(bookmarks . 6)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(projects . 4)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t)\n\t:config\n\t(dashboard-setup-startup-hook))\n</pre> </div> </div> </div> <div id="outline-container-org59a6a2a" class="outline-3"> <h3 id="org59a6a2a"> <span class="section-number-3">2.9.</span> Centaur tabs - OFF </h3> <div class="outline-text-3" id="text-2-9"> <p>Add tabes for emacs I did not like the workflow</p> <p> +begin<sub>src</sub> emacs-lisp (use-package centaur-tabs :demand :config (setq centaur-tabs-set-bar \'over centaur-tabs-set-icons t centaur-tabs-gray-out-icons \'buffer centaur-tabs-height 24 centaur-tabs-modified-marker t; ) (centaur-tabs-mode t) (setq centaur-tabs-style "slant") :bind ("C-&lt;prior&gt;" . centaur-tabs-backward) ("C-&lt;next&gt;" . centaur-tabs-forward)) #+end<sub>src</sub> </p> </div> </div> <div id="outline-container-org018a315" class="outline-3"> <h3 id="org018a315"> <span class="section-number-3">2.10.</span> Flycheck syntax checker </h3> <div class="outline-text-3" id="text-2-10"> <p>Add the capability to check code syntaxes</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package flycheck\n\t:ensure t\n\t:init (global-flycheck-mode))\n</pre> </div> </div> </div> <div id="outline-container-orge0ffb36" class="outline-3"> <h3 id="orge0ffb36"> <span class="section-number-3">2.11.</span> Helm - OFF </h3> <div class="outline-text-3" id="text-2-11"> <p>Auto complete for the mini-buffer</p> <p> ;#+begin<sub>src</sub> emacs-lisp (use-package helm :ensure t :config (helm-mode 1)) #+end<sub>src</sub> </p> </div> </div> <div id="outline-container-org69fa4a9" class="outline-3"> <h3 id="org69fa4a9"> <span class="section-number-3">2.12.</span> Ivy - OFF </h3> <div class="outline-text-3" id="text-2-12"> <p>Auto complete for the mini-buffer</p> <p> ;#+begin<sub>src</sub> emacs-lisp (use-package ivy :ensure t :config (ivy-mode 1)) #+end<sub>src</sub> </p> </div> <div id="outline-container-org17b04af" class="outline-4"> <h4 id="org17b04af"> <span class="section-number-4">2.12.1.</span> Ivy-rich - OFF </h4> <div class="outline-text-4" id="text-2-12-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;Description for commands\n;not working - Emacs for scratch 2 ~= 28:00 min\n;(use-package ivy-rich\n;  :after ivy\n;  :init\n;  (ivy-rich-mode 1))\n</pre> </div> <p>#+end<sub>src</sub></p> </div> </div> </div> <div id="outline-container-orgd9f714e" class="outline-3"> <h3 id="orgd9f714e"> <span class="section-number-3">2.13.</span> Vertigo </h3> <div class="outline-text-3" id="text-2-13"> <p>Auto complete for the mini-buffer</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;; Enable vertico\n(use-package vertico\n\t:init\n\t(vertico-mode)\n\t;; Different scroll margin\n\t;; (setq vertico-scroll-margin 0)\n\t;; Show more candidates\n\t;; (setq vertico-count 20)\n\t;; Grow and shrink the Vertico minibuffer\n\t;; (setq vertico-resize t)\n\t;; Optionally enable cycling for `vertico-next\' and `vertico-previous\'.\n\t;; (setq vertico-cycle t)\n\t)\n\n;; Optionally use the `orderless\' completion style. See\n;; `+orderless-dispatch\' in the Consult wiki for an advanced Orderless style\n;; dispatcher. Additionally enable `partial-completion\' for file path\n;; expansion. `partial-completion\' is important for wildcard support.\n;; Multiple files can be opened at once with `find-file\' if you enter a\n;; wildcard. You may also give the `initials\' completion style a try.\n(use-package orderless\n\t:init\n\t;; Configure a custom style dispatcher (see the Consult wiki)\n\t;; (setq orderless-style-dispatchers \'(+orderless-dispatch)\n\t;;       orderless-component-separator #\'orderless-escapable-split-on-space)\n\t(setq completion-styles \'(orderless)\n\t\t\t\tread-buffer-completion-ignore-case t\n\t\t\t\tcompletion-category-defaults nil\n\t\t\t\tcompletion-category-overrides \'((file (styles partial-completion)))))\n\n;; Persist history over Emacs restarts. Vertico sorts by history position.\n(use-package savehist\n\t:init\n\t(savehist-mode))\n;; A few more useful configurations...\n(use-package emacs\n\t:init\n\t;; Add prompt indicator to `completing-read-multiple\'.\n\t;; Alternatively try `consult-completing-read-multiple\'.\n\t(defun crm-indicator (args)\n\t\t(cons (concat "[CRM] " (car args)) (cdr args)))\n\t(advice-add #\'completing-read-multiple :filter-args #\'crm-indicator)\n\n\t;; Do not allow the cursor in the minibuffer prompt\n\t(setq minibuffer-prompt-properties\n\t\t\t\t\'(read-only t cursor-intangible t face minibuffer-prompt))\n\t(add-hook \'minibuffer-setup-hook #\'cursor-intangible-mode)\n\n\t;; Emacs 28: Hide commands in M-x which do not work in the current mode.\n\t;; Vertico commands are hidden in normal buffers.\n\t;; (setq read-extended-command-predicate\n\t;;       #\'command-completion-default-include-p)\n\n\t;; Enable recursive minibuffers\n\t(setq enable-recursive-minibuffers t))\n</pre> </div> </div> </div> <div id="outline-container-org0a961d3" class="outline-3"> <h3 id="org0a961d3"> <span class="section-number-3">2.14.</span> Marginalia </h3> <div class="outline-text-3" id="text-2-14"> <p> Add information to the buffer as the file size and the permissions </p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package marginalia\n\t:ensure t\n\t:config\n\t(marginalia-mode))\n</pre> </div> </div> </div> <div id="outline-container-org9733347" class="outline-3"> <h3 id="org9733347"> <span class="section-number-3">2.15.</span> Rainbow delimiter </h3> <div class="outline-text-3" id="text-2-15"> <p>[{( colorfull</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package rainbow-delimiters\n\t:hook (prog-mode . rainbow-delimiters-mode))\n</pre> </div> </div> </div> <div id="outline-container-orgee60ab0" class="outline-3"> <h3 id="orgee60ab0"> <span class="section-number-3">2.16.</span> Projectile </h3> <div class="outline-text-3" id="text-2-16"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package projectile\n\t:diminish projectile-mode\n\t:config (projectile-mode)\n\t:custom ((projectile-completion-system \'ivy))\n\t:bind-keymap\n\t("C-c p" . projectile-command-map)\n\t:init\n\t;; NOTE: Set this to the folder where you keep your Git repos!\n\t(when (file-directory-p "~/Projects/Code")\n\t\t(setq projectile-project-search-path \'("~/Projects/Code")))\n\t(setq projectile-switch-project-action #\'projectile-dired))\n\n\n</pre> </div> </div> <div id="outline-container-org251ee2e" class="outline-4"> <h4 id="org251ee2e"> <span class="section-number-4">2.16.1.</span> Counsel </h4> <div class="outline-text-4" id="text-2-16-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package counsel-projectile\n\t:after projectile\n\t:config (counsel-projectile-mode))\n</pre> </div> </div> </div> </div> <div id="outline-container-org7f0f20c" class="outline-3"> <h3 id="org7f0f20c"> <span class="section-number-3">2.17.</span> Magit </h3> <div class="outline-text-3" id="text-2-17"> <p>A user interface to manager your git repositories</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package magit\n\t:commands magit-status\n\t:custom\n\t(magit-display-buffer-function #\'magit-display-buffer-same-window-except-diff-v1))\n\n;; NOTE: Make sure to configure a GitHub token before using this package!\n;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation\n;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started\n(use-package forge\n\t:after magit)\n\n;;Add evil keys to magit\n;;for some reaseon this not work\n;;(use-package evil-collection\n;;:ensure t\n;;:after evil\n;;:init\n;;(evil-collection-init))\n</pre> </div> </div> </div> <div id="outline-container-orge3196a3" class="outline-3"> <h3 id="orge3196a3"> <span class="section-number-3">2.18.</span> Helpful </h3> <div class="outline-text-3" id="text-2-18"> <p> A better way to see documentation that the emacs original option </p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package helpful\n\t:ensure t)\n\n;;Change the default description for the helpful description\n(global-set-key (kbd "C-h f") #\'helpful-callable)\n\n(global-set-key (kbd "C-h v") #\'helpful-variable)\n(global-set-key (kbd "C-h k") #\'helpful-key)\n\n\n;; Lookup the current symbol at point. C-c C-d is a common keybinding\n;; for this in lisp modes.\n(global-set-key (kbd "C-c C-d") #\'helpful-at-point)\n\n;; Look up *F*unctions (excludes macros).\n;;\n;; By default, C-h F is bound to `Info-goto-emacs-command-node\'. Helpful\n;; already links to the manual, if a function is referenced there.\n(global-set-key (kbd "C-h F") #\'helpful-function)\n\n;; Look up *C*ommands.\n;;\n;; By default, C-h C is bound to describe `describe-coding-system\'. I\n;; don\'t find this very useful, but it\'s frequently useful to only\n;; look at interactive functions.\n(global-set-key (kbd "C-h C") #\'helpful-command)\n</pre> </div> </div> </div> </div> <div id="outline-container-orgf8b2899" class="outline-2"> <h2 id="orgf8b2899"> <span class="section-number-2">3.</span> Appearance </h2> <div class="outline-text-2" id="text-3"> <p>Packages to change the appearance of emacs</p> </div> <div id="outline-container-org521844a" class="outline-3"> <h3 id="org521844a"> <span class="section-number-3">3.1.</span> All the icons </h3> <div class="outline-text-3" id="text-3-1"> <p>Add fonts with icons that will the use for other packages</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package all-the-icons\n\t:ensure t)\n</pre> </div> </div> </div> <div id="outline-container-org35525c0" class="outline-3"> <h3 id="org35525c0"> <span class="section-number-3">3.2.</span> Doom Themes </h3> <div class="outline-text-3" id="text-3-2"> <p>Add the themes used in the doom emacs</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package doom-themes\n\t:ensure t\n\t:config\n\t(load-theme \'doom-tomorrow-night  t))\n</pre> </div> </div> </div> <div id="outline-container-org23e0166" class="outline-3"> <h3 id="org23e0166"> <span class="section-number-3">3.3.</span> Doom modeline </h3> <div class="outline-text-3" id="text-3-3"> <p>Add the modeline used in the doom emacs</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package doom-modeline\n\t:ensure t\n\t:init (doom-modeline-mode 1))\n</pre> </div> </div> </div> <div id="outline-container-orge27214d" class="outline-3"> <h3 id="orge27214d"> <span class="section-number-3">3.4.</span> Page Breaking </h3> <div class="outline-text-3" id="text-3-4"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package page-break-lines)\n\t(global-page-break-lines-mode)\n</pre> </div> </div> </div> </div> <div id="outline-container-org0fb5f42" class="outline-2"> <h2 id="org0fb5f42"> <span class="section-number-2">4.</span> Programming </h2> <div class="outline-text-2" id="text-4"> <p> This is packages are focues in giving the emacs full ide capabilities </p> </div> <div id="outline-container-orgc9b02c6" class="outline-3"> <h3 id="orgc9b02c6"> <span class="section-number-3">4.1.</span> lsp-mode </h3> <div class="outline-text-3" id="text-4-1"> <p> Give to emacs the capability to do syntax check in many programming languages </p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;;  (defun efs/lsp-mode-setup ()\n;;    (setq lsp-headerline-breadcrumb-segments \'(path-up-to-project file symbols))\n;;    (lsp-headerline-breadcrumb-mode))\n\n(use-package lsp-mode\n\t:ensure t\n\t:commands\n\t;;Activate the package when this functions are called\n\t(lsp lsp-deferred)\n\t:hook\n\t(lsp-mode . efs/lsp-mode-setup)\n\t;;Init lsp for the modes:\n\t(c-mode . lsp-deferred)\n\t(c++-mode . lsp-deferred)\n\t(python-mode . lsp-deferred)\n\t(web-mode . lsp-deferred)\n\t(css-mode . lsp-deferred)\n\t(scss-mode . lsp-deferred)\n\t(dockerfile-mode . lsp-deferred)\n\t(yaml-mode . lsp-deferred)\n\t:init\n\t(setq lsp-keymap-prefix "C-c l")  ;; Or \'C-l\', \'s-l\'\n\t:config\n\t(setq lsp-log-io nil);;don\'t log everthing = speed\n\t;;Sometimes the lsp stop for no reason\n\t;;this restart it\n\t(setq lsp-restart \'auto-restart)\n\t;;Give the presscription of\n\t;;the keys pressed using the\n\t;;which-key packge\n\t(lsp-enable-which-key-integration t))\n\n;;Avoid the lsp breaks the emacs\n(setq gc-cons-threshold 10000000)\n(setq read-process-output-max (* 1024 1024))\n\n</pre> </div> </div> <div id="outline-container-orgf7f86cf" class="outline-4"> <h4 id="orgf7f86cf"> <span class="section-number-4">4.1.1.</span> lsp-ui </h4> <div class="outline-text-4" id="text-4-1-1"> <p>This is a package that give a little ui to the lsp</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package lsp-ui\n\t:ensure t\n\t:config\n\t(setq lsp-ui-sideline-show-diagnostics t)\n\t(setq lsp-ui-sideline-show-hover t)\n\t(setq lsp-ui-sideline-show-code-actions t)\n\t:hook (lsp-mode . lsp-ui-mode))\n</pre> </div> </div> </div> <div id="outline-container-org401762c" class="outline-4"> <h4 id="org401762c"> <span class="section-number-4">4.1.2.</span> lsp-treeemacs </h4> <div class="outline-text-4" id="text-4-1-2"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package lsp-treemacs\n\t:after lsp)\n</pre> </div> </div> </div> </div> <div id="outline-container-orgc2d1f1c" class="outline-3"> <h3 id="orgc2d1f1c"> <span class="section-number-3">4.2.</span> dap-mode ( Debug Adapter Protocol) </h3> <div class="outline-text-3" id="text-4-2"> <p> This extension allow use to use external programs to debug your code like lsp </p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package dap-mode) \n</pre> </div> </div> </div> <div id="outline-container-org3ce1ef6" class="outline-3"> <h3 id="org3ce1ef6"> <span class="section-number-3">4.3.</span> Company-mode </h3> <div class="outline-text-3" id="text-4-3"> <p>Give completion functionalities to the lsp</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package company\n\t:after\n\t;;Will run afther the lsp-mode\n\tlsp-mode\n\t:ensure t\n\t:hook\n\t(lsp-mode . company-mode)\n\t:init\n\t(add-hook \'after-init-hook \'global-company-mode)\n\n\t:bind\n\t(:map company-active-map\n\t\t\t\t("&lt;tab&gt;" . company-complete-selection))\n\t(:map lsp-mode-map\n\t\t\t\t("&lt;tab&gt;" . company-indent-or-complete-common))\n\n\t:config\n\t(global-company-mode t)\n\t(setq company-idle-delay 0.0\n\t\t\t\tcompany-minimum-prefix-lengh 1)\n\t)\n\n(use-package company-box\n\t:hook (company-mode . company-box-mode))\n</pre> </div> </div> </div> <div id="outline-container-org6f4e76c" class="outline-3"> <h3 id="org6f4e76c"> <span class="section-number-3">4.4.</span> Elisp </h3> <div class="outline-text-3" id="text-4-4"></div> <div id="outline-container-org99aaedd" class="outline-4"> <h4 id="org99aaedd"> <span class="section-number-4">4.4.1.</span> ParaEdit </h4> <div class="outline-text-4" id="text-4-4-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package paredit\n\t:ensure t)\n(autoload \'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)\n(add-hook \'emacs-lisp-mode-hook       #\'enable-paredit-mode)\n(add-hook \'eval-expression-minibuffer-setup-hook #\'enable-paredit-mode)\n(add-hook \'ielm-mode-hook             #\'enable-paredit-mode)\n(add-hook \'lisp-mode-hook             #\'enable-paredit-mode)\n(add-hook \'lisp-interaction-mode-hook #\'enable-paredit-mode)\n(add-hook \'scheme-mode-hook           #\'enable-paredit-mode)\n</pre> </div> </div> </div> </div> <div id="outline-container-org78d78b4" class="outline-3"> <h3 id="org78d78b4"> <span class="section-number-3">4.5.</span> Org </h3> <div class="outline-text-3" id="text-4-5"></div> <div id="outline-container-org525799f" class="outline-4"> <h4 id="org525799f"> <span class="section-number-4">4.5.1.</span> Basic Config </h4> <div class="outline-text-4" id="text-4-5-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(defun efs/org-mode-setup ()\n\t(org-indent-mode)\n\t(variable-pitch-mode 1)\n\t(visual-line-mode 1))\n\n(use-package org\n\t:pin org\n\t:commands (org-capture org-agenda)\n\t:hook (org-mode . efs/org-mode-setup)\n\t:config\n\t(setq org-ellipsis " \u25be"))\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;allow the org files display images\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;(org-toggle-inline-images)\n</pre> </div> </div> </div> <div id="outline-container-org5fad39c" class="outline-4"> <h4 id="org5fad39c"> <span class="section-number-4">4.5.2.</span> Centraliza o texto org mode </h4> <div class="outline-text-4" id="text-4-5-2"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(defun efs/org-mode-visual-fill ()\n\t(setq visual-fill-column-width 100\n\t\t\t\tvisual-fill-column-center-text t)\n\t(visual-fill-column-mode 1))\n\n(use-package visual-fill-column\n\t:hook (org-mode . efs/org-mode-visual-fill))\n\n(with-eval-after-load \'org\n\t(org-babel-do-load-languages\n\t \'org-babel-load-languages\n\t \'((emacs-lisp . t)\n\t\t (python . t)))\n\t(push \'("conf-unix" . conf-unix) org-src-lang-modes))\n</pre> </div> </div> </div> <div id="outline-container-orgd0bc157" class="outline-4"> <h4 id="orgd0bc157"> <span class="section-number-4">4.5.3.</span> Add templets for the extencions .el, .py &#x2026; </h4> <div class="outline-text-4" id="text-4-5-3"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(with-eval-after-load \'org\n\t;; This is needed as of Org 9.2\n\t(require \'org-tempo)\n\t(add-to-list \'org-structure-template-alist \'("sh" . "src shell"))\n\t(add-to-list \'org-structure-template-alist \'("cpp" . "src cpp"))\n\t(add-to-list \'org-structure-template-alist \'("el" . "src emacs-lisp"));\n\t(add-to-list \'org-structure-template-alist \'("py" . "src python"))\n\t(add-to-list \'org-structure-template-alist \'("js" . "src js"))\n\t;;C doenst work yet\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;(add-to-list \'org-structure-template-alist \'("c" . "src C"))\n\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;remove the massage ask you to exec the command\n(setq org-confirm-babel-evaluate nil)\n</pre> </div> </div> </div> <div id="outline-container-org4ff76a8" class="outline-4"> <h4 id="org4ff76a8"> <span class="section-number-4">4.5.4.</span> Babel to load </h4> <div class="outline-text-4" id="text-4-5-4"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(org-babel-do-load-languages\n \'org-babel-load-languages\n \'((emacs-lisp .t)\n\t (python .t)\n\t (C .t)\n\t (css .t)\n\t (js .t)\n\t (lua .t)\n\t ))\n</pre> </div> </div> </div> <div id="outline-container-org3fb5958" class="outline-4"> <h4 id="org3fb5958"> <span class="section-number-4">4.5.5.</span> Tangle automatic </h4> <div class="outline-text-4" id="text-4-5-5"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;; Automatically tangle our Emacs.org config file when we save it\n(defun efs/org-babel-tangle-config ()\n\t(when (string-equal (file-name-directory (buffer-file-name))\n\t\t\t\t\t\t\t\t\t\t\t(expand-file-name user-emacs-directory))\n\t\t;; Dynamic scoping to the rescue\n\t\t(let ((org-confirm-babel-evaluate nil))\n\t\t\t(org-babel-tangle))))\n\n(add-hook \'org-mode-hook (lambda () (add-hook \'after-save-hook #\'efs/org-babel-tangle-config)))\n\n(defun efs/lsp-mode-setup ()\n\t(setq lsp-headerline-breadcrumb-segments \'(path-up-to-project file symbols));\n\t(lsp-headerline-breadcrumb-mode))\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;(defun efs/org-babel-tangle-config ()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;  (when (string-equal (file-name-directory (buffer-file-name))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;                      (expand-file-name user-emacs-directory))\n;; Dynamic scoping to the rescue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;    (let ((org-confirm-babel-evaluate nil))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;      (org-babel-tangle))))\n</pre> </div> </div> </div> <div id="outline-container-orgf7f56ff" class="outline-4"> <h4 id="orgf7f56ff"> <span class="section-number-4">4.5.6.</span> Org Agenda </h4> <div class="outline-text-4" id="text-4-5-6"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(setq org-agenda-files\n\t\t\t\'("~/codes/Org/Agenda.org"))\n(setq org-agenda-start-with-log-mode t)\n(setq org-log-done \'time)\n(setq org-log-into-drawer t)\n</pre> </div> </div> </div> <div id="outline-container-org9ba2d52" class="outline-4"> <h4 id="org9ba2d52"> <span class="section-number-4">4.5.7.</span> Customization </h4> <div class="outline-text-4" id="text-4-5-7"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(setq org-startup-folded t)\n(setq org-startup-indented t)\n(setq org-startup-with-inline-images t)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;(use-package org-bullets\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;:ensure t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;:hook (org-mode . org-bullets-mode)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;:custom\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;(org-bullets-bullet-list \'("\u25c9" "\u25cb" "\u25cf" "\u25cb" "\u25cf" "\u25cb" "\u25cf"))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;)\n\n(use-package org-superstar\n\t:ensure t\n\t:config\n\t(add-hook \'org-mode-hook (lambda () (org-superstar-mode 1))))\n\n</pre> </div> </div> </div> <div id="outline-container-org5215a97" class="outline-4"> <h4 id="org5215a97"> <span class="section-number-4">4.5.8.</span> Org Roam </h4> <div class="outline-text-4" id="text-4-5-8"> <p>Not working</p> <p> +begin<sub>src</sub> emacs-lisp (use-package org-roam :ensure t) #+end<sub>src</sub> </p> </div> </div> <div id="outline-container-orgf3eefd8" class="outline-4"> <h4 id="orgf3eefd8"> <span class="section-number-4">4.5.9.</span> Change the sizes of the headers </h4> <div class="outline-text-4" id="text-4-5-9"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   Set faces for heading levels\n(dolist (face \'((org-level-1 . 1.4)\n\t\t\t\t\t\t\t\t(org-level-2 . 1.3)\n\t\t\t\t\t\t\t\t(org-level-3 . 1.2)\n\t\t\t\t\t\t\t\t(org-level-4 . 1.1)\n\t\t\t\t\t\t\t\t(org-level-5 . 1.1)\n\t\t\t\t\t\t\t\t(org-level-6 . 1.1)\n\t\t\t\t\t\t\t\t(org-level-7 . 1.1)\n\t\t\t\t\t\t\t\t(org-level-8 . 1.1)))\n\t(set-face-attribute (car face) nil :font "Cantarell" :weight \'regular :height (cdr face)))\n\n;; Ensure that anything that should be fixed-pitch in Org files appears that way\n(set-face-attribute \'org-block nil    :foreground nil :inherit \'fixed-pitch)\n(set-face-attribute \'org-table nil    :inherit \'fixed-pitch)\n(set-face-attribute \'org-formula nil  :inherit \'fixed-pitch)\n(set-face-attribute \'org-code nil     :inherit \'(shadow fixed-pitch))\n(set-face-attribute \'org-table nil    :inherit \'(shadow fixed-pitch))\n(set-face-attribute \'org-verbatim nil :inherit \'(shadow fixed-pitch))\n(set-face-attribute \'org-special-keyword nil :inherit \'(font-lock-comment-face fixed-pitch))\n(set-face-attribute \'org-meta-line nil :inherit \'(font-lock-comment-face fixed-pitch))\n(set-face-attribute \'org-checkbox nil  :inherit \'fixed-pitch)\n(set-face-attribute \'line-number nil :inherit \'fixed-pitch)\n(set-face-attribute \'line-number-current-line nil :inherit \'fixed-pitch)\n</pre> </div> </div> </div> </div> <div id="outline-container-org99a6056" class="outline-3"> <h3 id="org99a6056"> <span class="section-number-3">4.6.</span> Python </h3> <div class="outline-text-3" id="text-4-6"></div> <div id="outline-container-orgdf2ab89" class="outline-4"> <h4 id="orgdf2ab89"> <span class="section-number-4">4.6.1.</span> Python mode </h4> <div class="outline-text-4" id="text-4-6-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package python-mode\n\t:ensure t\n\t:hook (python-mode . lsp-deferred)\n\t:custom\n\t;; NOTE: Set these if Python 3 is called "python3" on your system!\n\t;; (python-shell-interpreter "python3")\n\t;; (dap-python-executable "python3")\n\t(dap-python-debugger \'debugpy)\n\t:config\n\t(require \'dap-python))\n</pre> </div> </div> </div> </div> <div id="outline-container-org43142c2" class="outline-3"> <h3 id="org43142c2"> <span class="section-number-3">4.7.</span> JS- Not useful since I have the web mode </h3> <div class="outline-text-3" id="text-4-7"></div> <div id="outline-container-orgb15f49a" class="outline-4"> <h4 id="orgb15f49a"> <span class="section-number-4">4.7.1.</span> RJSX </h4> <div class="outline-text-4" id="text-4-7-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package rjsx-mode\n\t:ensure t\n\t:mode "\\\\.js\\\\\'")\n</pre> </div> </div> </div> <div id="outline-container-orge29a051" class="outline-4"> <h4 id="orge29a051"> <span class="section-number-4">4.7.2.</span> Tide </h4> <div class="outline-text-4" id="text-4-7-2"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(defun setup-tide-mode ()\n\t(interactive)\n\t(tide-setup)\n\t(flycheck-mode +1)\n\t(setq flycheck-check-syntax-automatically \'(save mode-enabled))\n\t(eldoc-mode +1)\n\t(tide-hl-identifier-mode +1)\n\t;; company is an optional dependency. You have to\n\t;; install it separately via package-install\n\t;; `M-x package-install [ret] company`\n\t(company-mode +1))\n\n;; aligns annotation to the right hand side\n(setq company-tooltip-align-annotations t)\n\n;; formats the buffer before saving\n(add-hook \'before-save-hook \'tide-format-before-save)\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;typescripte config\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;(require \'web-mode)\n(add-to-list \'auto-mode-alist \'("\\\\.tsx\\\\\'" . web-mode))\n(add-hook \'web-mode-hook\n\t\t\t\t\t(lambda ()\n\t\t\t\t\t\t(when (string-equal "tsx" (file-name-extension buffer-file-name))\n\t\t\t\t\t\t\t(setup-tide-mode))))\n\n;; enable typescript - tslint checker\n(flycheck-add-mode \'typescript-tslint \'web-mode)\n\n(add-hook \'typescript-mode-hook #\'setup-tide-mode)\n\n(use-package tide\n\t:ensure t\n\t:after (rjsx-mode company flycheck)\n\t:hook (rjsx-mode . setup-tide-mode))\n</pre> </div> </div> </div> </div> <div id="outline-container-org682a367" class="outline-3"> <h3 id="org682a367"> <span class="section-number-3">4.8.</span> Typescript </h3> <div class="outline-text-3" id="text-4-8"> <p> I am using the LSP theia-ide to install it in your machine run the command in your terminal: </p> <div class="org-src-container"> <pre class="src src-shell">\nnpm i -g typescript-language-server; npm i -g typescript\n</pre> </div> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package typescript-mode\n\t:mode "\\\\.ts\\\\\'"\n\t:hook\n\t;;Start the lsp when the enter in the type script mode\n\t(typescript-mode . lsp-deferred)\n\t:config\n\t(setq typescript-indent-level 2)\n\t;;Installs the dap for node applications\n\t(require \'dap-node)\n\t(dap-node-setup))\n</pre> </div> </div> </div> <div id="outline-container-org9a95f03" class="outline-3"> <h3 id="org9a95f03"> <span class="section-number-3">4.9.</span> web-mode </h3> <div class="outline-text-3" id="text-4-9"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(setq-default tab-width 2)\n(setq indent-tabs-mode nil)\n(defun luke/webmode-hook ()\n\t"Webmode configurations."\n\t(setq web-mode-enable-comment-annotation t)\n\t(setq web-mode-markup-indent-offset 2)\n\t(setq web-mode-code-indent-offset 2)\n\t(setq web-mode-css-indent-offset 2)\n\t(setq web-mode-attr-indent-offset 0)\n\t(setq web-mode-enable-auto-indentation t)\n\t(setq web-mode-enable-auto-closing t)\n\t(setq web-mode-enable-auto-pairing t)\n\t(setq web-mode-enable-css-colorization t)\n\t)\n(use-package web-mode\n\t:ensure t\n\t:mode (("\\\\.js\\\\\'" . web-mode)\n\t\t\t\t ("\\\\.jsx\\\\\'" . web-mode)\n\t\t\t\t ("\\\\.ts\\\\\'" . web-mode)\n\t\t\t\t ("\\\\.tsx\\\\\'" . web-mode)\n\t\t\t\t ;;Was confiliting with lsp\n\t\t\t\t ;;("\\\\.css\\\\\'" . web-mode)\n\t\t\t\t ("\\\\.html\\\\\'" . web-mode))\n\t:commands web-mode\n\t:hook (web-mode . luke/webmode-hook)\n\t)\n</pre> </div> </div> <div id="outline-container-org6b06c92" class="outline-4"> <h4 id="org6b06c92"> <span class="section-number-4">4.9.1.</span> Prettier </h4> <div class="outline-text-4" id="text-4-9-1"> <p>Package for formating the webmode</p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package prettier\n\t:ensure t\n\t:hook\n\t((mhtml-mode css-mode scss-mode rjsx-mode js2-mode web-mode) . prettier-mode))\n</pre> </div> </div> </div> </div> <div id="outline-container-org4ab8944" class="outline-3"> <h3 id="org4ab8944"> <span class="section-number-3">4.10.</span> CSS/SCSS-mode </h3> <div class="outline-text-3" id="text-4-10"> <p> #+begin<sub>src</sub> emacs-lisp (use-package css-mode :mode "\\\\.css\\\\\'") </p> <p>(use-package scss-mode :mode "\\\\.scss\\\\\'") #+end<sub>s</sub></p> </div> </div> <div id="outline-container-org54a6bca" class="outline-3"> <h3 id="org54a6bca"> <span class="section-number-3">4.11.</span> JSON-mode </h3> <div class="outline-text-3" id="text-4-11"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;; json-mode\n(use-package json-mode\n\t:ensure t)\n</pre> </div> </div> </div> <div id="outline-container-org0fb8813" class="outline-3"> <h3 id="org0fb8813"> <span class="section-number-3">4.12.</span> yalm-mode </h3> <div class="outline-text-3" id="text-4-12"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package yaml-mode)\n</pre> </div> </div> </div> <div id="outline-container-org56c1838" class="outline-3"> <h3 id="org56c1838"> <span class="section-number-3">4.13.</span> Dockerfile-mode </h3> <div class="outline-text-3" id="text-4-13"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package dockerfile-mode)\n</pre> </div> </div> </div> <div id="outline-container-orgc5d2099" class="outline-3"> <h3 id="orgc5d2099"> <span class="section-number-3">4.14.</span> format-all </h3> <div class="outline-text-3" id="text-4-14"> <p> This package allow us to format almost all programming automatically </p> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(use-package format-all\n:ensure t\n:hook\n(c-mode . format-all-mode)\n)\n(add-hook \'c-mode-hook \'format-all-mode)\n</pre> </div> </div> </div> </div> <div id="outline-container-orgf271042" class="outline-2"> <h2 id="orgf271042"> <span class="section-number-2">5.</span> Update packages </h2> <div class="outline-text-2" id="text-5"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;; Instala\xe7\xe3o do auto-update\n\n(use-package auto-package-update\n\t:custom\n\t(auto-package-update-interval 7)\n\t(auto-package-update-prompt-before-update t)\n\t(auto-package-update-hide-results t)\n\t:config\n\t(auto-package-update-maybe)\n\t(auto-package-update-at-time "21:00"))\n\n</pre> </div> </div> </div> <div id="outline-container-orgfd96e5f" class="outline-2"> <h2 id="orgfd96e5f"> <span class="section-number-2">6.</span> Key Binds </h2> <div class="outline-text-2" id="text-6"></div> <div id="outline-container-org6214504" class="outline-3"> <h3 id="org6214504"> <span class="section-number-3">6.1.</span> org-babel-tange </h3> <div class="outline-text-3" id="text-6-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n;(global-set-key (kbd "C-l") (message "ola"))\n\n</pre> </div> </div> </div> <div id="outline-container-org7fc3bfd" class="outline-3"> <h3 id="org7fc3bfd"> <span class="section-number-3">6.2.</span> flyspell, ispell </h3> <div class="outline-text-3" id="text-6-2"></div> <div id="outline-container-orgaba6adc" class="outline-4"> <h4 id="orgaba6adc"> <span class="section-number-4">6.2.1.</span> flyspelll-prog-mode key binding </h4> <div class="outline-text-4" id="text-6-2-1"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(global-set-key (kbd "&lt;f6&gt;") \'flyspell-prog-mode)\n</pre> </div> </div> </div> <div id="outline-container-orgf6912b3" class="outline-4"> <h4 id="orgf6912b3"> <span class="section-number-4">6.2.2.</span> flyspell-key-mode binding </h4> <div class="outline-text-4" id="text-6-2-2"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(global-set-key (kbd "C-&lt;f6&gt;") \'flyspell-mode)\n</pre> </div> </div> </div> <div id="outline-container-org9458f5c" class="outline-4"> <h4 id="org9458f5c"> <span class="section-number-4">6.2.3.</span> Ispell comments and strings key binding </h4> <div class="outline-text-4" id="text-6-2-3"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(global-set-key (kbd "&lt;f7&gt;") \'ispell-comments-and-strings)\n</pre> </div> </div> </div> <div id="outline-container-org00bcaca" class="outline-4"> <h4 id="org00bcaca"> <span class="section-number-4">6.2.4.</span> Ispell key binding </h4> <div class="outline-text-4" id="text-6-2-4"> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(global-set-key (kbd "C-&lt;f7&gt;") \'ispell)\n</pre> </div> </div> </div> </div> </div> <div id="outline-container-org7b5d067" class="outline-2"> <h2 id="org7b5d067"> <span class="section-number-2">7.</span> Test area </h2> <div class="outline-text-2" id="text-7"> <p>Area to test new packages without break the emacs</p> <pre class="example"></pre> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(require \'platformio-mode)\n\n;; Enable ccls for all c++ files, and platformio-mode only\n;; when needed (platformio.ini present in project root).\n(add-hook \'c++-mode-hook (lambda ()\n\t\t\t\t\t\t\t\t\t\t\t\t\t (lsp-deferred)\n\t\t\t\t\t\t\t\t\t\t\t\t\t (platformio-conditionally-enable)))\n</pre> </div> <div class="org-src-container"> <pre class="src src-emacs-lisp">\n(require \'dotenv-mode) ; unless installed from a package\n(add-to-list \'auto-mode-alist \'("\\\\.env\\\\..*\\\\\'" . dotenv-mode)) \n</pre> </div> </div> </div> </div> <div id="postamble" class="status"> <p class="author">Author: Giovani Pedroso</p> <p class="date">Created: 2022-11-12 s\xe1b 00:56</p> <p class="validation"> <a href="https://validator.w3.org/check?uri=referer">Validate</a> </p> </div> </body> </html> '}}]);